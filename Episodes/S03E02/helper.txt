Jesteś doświadczonym .NET Developerem z wiedzą o OpenAI oraz Qdrant, Twoim zadaniem jest implementacja kodu w C#, który będzie zgodny z wytycznymi zadania, przykładem w TS (do wzrowoania się, kod ma być w C#) oraz przykładem struktury klasy na zadanie.

<wytyczneZadania>
W archiwum weapons_tests.zip znajdziesz raporty z testów nowoczesnej broni. Zaindeksuj je z użyciem embeddingów w swojej bazie wektorowej, a następnie odpowiedz na pytanie:


W raporcie, z którego dnia znajduje się wzmianka o kradzieży prototypu broni?

Oczekiwana jest odpowiedź w formacie YYYY-MM-DD

Nazwa zadania w centrali to wektory.

Co należy zrobić w zadaniu?
Pobierz i rozpakuj dane:
- Pobierz główne archiwum: https://c3ntrala.ag3nts.org/dane/pliki_z_fabryki.zip.
- Wewnątrz znajdziesz zaszyfrowane archiwum weapons_tests.zip. 
- Rozpakuj je używając hasła: 1670
- W środku będą pliki tekstowe z raportami.



Przygotuj bazę wektorową:
- Wybierz i skonfiguruj dowolną bazę wektorową (np. Qdrant, Pinecone, Weaviate, LanceDB, ChromaDB). Wielu uczestników z powodzeniem używało Qdrant, np. lokalnie przez Docker.
- Utwórz w niej kolekcję na raporty. Kluczowe: Zwróć uwagę na wymiar (dimensions / size) wektorów – musi on odpowiadać wymiarowi generowanemu przez wybrany przez Ciebie model embeddingu (patrz Wskazówki).



Indeksuj raporty - Dla każdego pliku raportu (.txt) z weapons_tests.zip: 
- Odczytaj datę raportu: Data jest zawarta w nazwie pliku (np. 2024-02-21_XR-5_report.txt). Przetwórz ją do formatu YYYY-MM-DD.
- Odczytaj treść raportu.
- Wygeneruj embedding: Użyj wybranego modelu do embeddingów (np. od OpenAI: text-embedding-3-large), aby przekształcić treść raportu na wektor liczbowy.
- Zapisz w bazie wektorowej: Zapisz wygenerowany wektor wraz z metadanymi. Metadane muszą zawierać przynajmniej datę raportu (w formacie YYYY-MM-DD). Możesz dodać inne metadane, np. nazwę pliku.



Przygotuj i zadaj pytanie:
- Pytanie brzmi: "W raporcie, z którego dnia znajduje się wzmianka o kradzieży prototypu broni?"
- Wygeneruj embedding pytania: Użyj tego samego modelu embeddingu, co do raportów, aby przekształcić pytanie na wektor.
- Odpytaj bazę: Przeszukaj swoją bazę wektorową używając embeddingu pytania. Ustaw limit zwracanych wyników na 1 (interesuje Cię najbardziej pasujący raport).



Odczytaj i prześlij odpowiedź:
- Z metadanych zwróconego przez bazę wektorową raportu odczytaj zapisaną wcześniej datę.
- Wyślij odpowiedź do /report w centrali. Format odpowiedzi to JSON:

   {   "task": "wektory",   "apikey": "YOUR_API_KEY",   "answer": "YYYY-MM-DD" }

- Pamiętaj o zastąpieniu YOUR_API_KEY swoim kluczem API oraz YYYY-MM-DD uzyskaną datą.

Wskazówki:

Źródło daty: Kluczowa informacja o dacie znajduje się w NAZWIE PLIKU każdego raportu. Upewnij się, że ją poprawnie odczytujesz i zapisujesz (np. w metadanych jako string YYYY-MM-DD).

Wybór modelu embeddingu: Popularne i często skuteczne są modele OpenAI (np. text-embedding-3-large który ma 3072 wymiary). Istnieją też inne, np. od Jina AI, Cohere, czy opensource'owe jak all-MiniLM-L6-v2. Pamiętaj, że różne modele generują wektory o różnej liczbie wymiarów. Musisz użyć tego samego modelu do indeksowania raportów i do generowania embeddingu dla pytania.

Konfiguracja bazy wektorowej (szczególnie Qdrant):

KRYTYCZNE: Wymiar kolekcji! Podczas tworzenia kolekcji w bazie (np. Qdrant) musisz podać size (wymiar wektora). Ta wartość MUSI być identyczna z wymiarem wektorów generowanych przez wybrany model embeddingu.

Przykład: Jeśli używasz text-embedding-ada-002 (1536 wymiarów), kolekcja w Qdrant musi być utworzona z size: 1536.

Niezgodność wymiarów często prowadzi do tego, że baza (np. Qdrant) zwraca status 200 OK przy dodawaniu punktów, ale baza pozostaje pusta, punkty mają wyzerowane wektory, lub operacja po prostu cicho zawodzi. Sprawdź dokumentację swojego modelu embeddingu w kwestii ilości wymiarów!

Logi Qdrant: Jeśli używasz Qdrant w Dockerze i napotkasz problemy, sprawdź logi kontenera (docker logs <nazwa_kontenera_qdrant>). Często zawierają one bardziej szczegółowe informacje o błędach niż samo API.

Qdrant wymaga, aby wysyłane do niego punkty (rekordy) miały ID w formie UUID  lub integer. Kiedy to wymaganie jest niespełnione, dodawanie punktu do bazy nie powiedzie się → https://qdrant.tech/documentation/concepts/points/
Metadane są kluczowe: Zapisuj datę raportu (YYYY-MM-DD) w metadanych obok wektora. To z metadanych najbardziej pasującego dokumentu odczytasz odpowiedź.

Format odpowiedzi: Pamiętaj, że odpowiedź to data w formacie YYYY-MM-DD. Ostrożnie z konwersjami dat w Twoim kodzie, aby uniknąć błędów o jeden dzień.

Wyjaśnienie: To zadanie ze względu na miniaturowy rozmiar zestawu danych można oczywiście wykonać za pomocą jednego prompta i nie potrzebujesz do niego bazy wektorowej. Celem ćwiczenia jest jednak zaznajomienie się z działaniem tego typu baz i zachęcenie Cię do przynajmniej jednokrotnego wykorzystania takiej bazy w praktyce. Spróbuj więc wykonać ćwiczenie zgodnie z jego założeniami.
</wytyczneZadania>

<przykladTS>
import { OpenAIService } from "./OpenAIService";
import { TextSplitter } from "./TextService";
import { VectorService } from './VectorService';
import type { ChatCompletion } from "openai/resources/chat/completions";

const data = [
    { author: 'Jim Collins', text: 'Good to Great: "Good is the enemy of great. To go from good to great requires transcending the curse of competence."' },
    { author: 'Jim Collins', text: 'Built to Last: "Clock building, not time telling. Focus on building an organization that can prosper far beyond the presence of any single leader and through multiple product life cycles."' },
    { author: 'Jim Collins', text: 'Great by Choice: "20 Mile March. Achieve consistent performance markers, in good times and bad, as a way to build resilience and maintain steady growth."' },
    { author: 'Jim Collins', text: 'How the Mighty Fall: "Five stages of decline: hubris born of success, undisciplined pursuit of more, denial of risk and peril, grasping for salvation, and capitulation to irrelevance or death."' },
    { author: 'Jim Collins', text: 'Beyond Entrepreneurship 2.0: "The flywheel effect. Success comes from consistently pushing in a single direction, gaining momentum over time."' },
    { author: 'Jim Collins', text: 'Turning the Flywheel: "Disciplined people, thought, and action. Great organizations are built on a foundation of disciplined individuals who engage in disciplined thought and take disciplined action."' },
    { author: 'Jim Collins', text: 'Built to Last: "Preserve the core, stimulate progress. Enduring great companies maintain their core values and purpose while their business strategies and operating practices endlessly adapt to a changing world."' },
    { author: 'Jim Collins', text: 'Good to Great: "First who, then what. Get the right people on the bus, the wrong people off the bus, and the right people in the right seats before you figure out where to drive it."' },
    { author: 'Simon Sinek', text: 'Start with Why: "People don\'t buy what you do; they buy why you do it. And what you do simply proves what you believe."' },
    { author: 'Simon Sinek', text: 'Leaders Eat Last: "The true price of leadership is the willingness to place the needs of others above your own. Great leaders truly care about those they are privileged to lead and understand that the true cost of the leadership privilege comes at the expense of self-interest."' },
    { author: 'Simon Sinek', text: 'The Infinite Game: "In the Infinite Game, the true value of an organization cannot be measured by the success it has achieved based on a set of arbitrary metrics over arbitrary time frames. The true value of an organization is measured by the desire others have to contribute to that organization\'s ability to keep succeeding, not just during the time they are there, but well beyond their own tenure."' }
];

const query = 'What does Sinek and Collins said about working with people?';

const COLLECTION_NAME = "aidevs";

const openai = new OpenAIService();
const vectorService = new VectorService(openai);
const textSplitter = new TextSplitter();

async function initializeData() {
    const points = await Promise.all(data.map(async ({ author, text }) => {
        const doc = await textSplitter.document(text, 'gpt-4o', { author });
        return doc;
    }));

    await vectorService.initializeCollectionWithData(COLLECTION_NAME, points);
}

async function main() {
    await initializeData();

    const determineAuthor = await openai.completion({
        messages: [
            { role: 'system', content: `You are a helpful assistant that determines the author(s) of a given text. 
                                        Pick between Jim Collins and Simon Sinek. If both are relevant, list them comma-separated. Write back with the name(s) and nothing else.` },
            { role: 'user', content: query }
        ]
    }) as ChatCompletion;

    const authors = determineAuthor.choices[0].message.content?.split(',').map(a => a.trim()) || [];

    const filter = authors.length > 0 ? {
      should: authors.map(author => ({
        key: "author",
        match: {
          value: author
        }
      }))
    } : undefined;

    const searchResults = await vectorService.performSearch(COLLECTION_NAME, query, filter, 15);

    const relevanceChecks = await Promise.all(searchResults.map(async (result) => {
        const relevanceCheck = await openai.completion({
            messages: [
                { role: 'system', content: 'You are a helpful assistant that determines if a given text is relevant to a query. Respond with 1 if relevant, 0 if not relevant.' },
                { role: 'user', content: `Query: ${query}\nText: ${result.payload?.text}` }
            ]
        }) as ChatCompletion;
        const isRelevant = relevanceCheck.choices[0].message.content === '1';
        return { ...result, isRelevant };
    }));

    const relevantResults = relevanceChecks.filter(result => result.isRelevant);

    console.log(`Query: ${query}`);
    console.log(`Author(s): ${authors.join(', ')}`);
    console.table(relevantResults.map((result, index) => ({
        'Author': result.payload?.author || '',
        'Text': result.payload?.text?.slice(0, 45) + '...' || '',
        'Score': result.score
    })));
}

main().catch(console.error);

</przykladTS>

<wzorStrutury>
public class Episode12 : EpisodeBase
{
    public override string Name => "S03E02 — Wyszukiwanie Semantyczne (Episode12)";
    public override string Description => "Zaindeksuj pliki tekstowe z użyciem embeddingów w swojej bazie wektorowej Qdrant, a następnie odpowiedz na pytanie";

    public const string Question = "W raporcie, z którego dnia znajduje się wzmianka o kradzieży prototypu broni?";
    private const string TextFilesFolder = @"D:\ai-dev\ai-devs-zadania-code\ai-devs-tasks\Episodes\S03E02\textData";

    public override async Task RunAsync()
    { 
        //code
    }
}
</wzorStruktury>